[gd_scene load_steps=6 format=2]

[ext_resource path="res://Sprites/Weapons/turret_base.png" type="Texture" id=1]

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.0
bounce = 0.5

[sub_resource type="GDScript" id=2]
script/source = "extends StaticBody2D
var targets = Array()
var target
var team : bool = true
var ready_to_fire : bool = false
var MAX_VISIBLITY_CHECKS : int = 4
export var gun_name : String = \"AK47\"
export var portrait_img : Texture
var main_gun = null

#player who created this turret
var maker = null


#only server controls the turret
#initiate  turret systems
func _ready():
	setup_main_gun()
	if get_tree().is_network_server():
		$target_update.start()
		$update.start()

func setup_main_gun():
	if not main_gun:
		main_gun = game_states.weaponResource[gun_name].instance()
		main_gun.position = Vector2(0,0)
		main_gun.gun_user = maker
		add_child(main_gun)


#get collect monsters entered the detector
func _on_detector_body_entered(body):
	if body.is_in_group(\"Monster\"):
		targets.append(body)
#get remove monsters left the detector
func _on_detector_body_exited(body):
	if body.is_in_group(\"Monster\"):
		targets.erase(body)

#get nearest monster
func _on_target_update_timeout():
	target = _get_nearest_visible_monster()
	

#function to get nearest monster
func _get_nearest_visible_monster():
	var pls = get_tree().get_nodes_in_group(\"Monster\")
	if pls.size() == 0:
		return null
	var p = null
	var min_distance : int = 99999
	var checks : int = 0
	var chk_counter : bool = false
	for pl in pls:
		if pl.alive:
			if chk_counter:
				checks += 1
			if checks > MAX_VISIBLITY_CHECKS:
				break
			var space_state = get_world_2d().direct_space_state
			var result = space_state.intersect_ray(main_gun.get_node(\"Muzzle\").global_position, pl.global_position,[self], collision_mask)
			if result:
				if result.collider.is_in_group(\"Monster\"):
					chk_counter = true
					var dist = (position - pl.position).length()
					if dist < min_distance:
						min_distance = dist
						p = pl
	return p

#get ready to fire if target is in sight
func _on_update_timeout():
	ready_to_fire = false
	if not target:
		return
	if (weakref(target).get_ref()):
		ready_to_fire = true
		main_gun.rotation = (target.position - main_gun.global_position).angle() + 1.57
		rpc(\"_sync_rotation\",main_gun.rotation)

#fire gun if ready to fire
func _process(delta):
	if get_tree().is_network_server():
		if ready_to_fire:
			main_gun.fireGun()

#sync rotation of main gun with peers
remote func _sync_rotation(rot):
	main_gun.rotation = rot"

[sub_resource type="RectangleShape2D" id=3]
extents = Vector2( 2.98805, 2.34569 )

[sub_resource type="CircleShape2D" id=4]
radius = 341.984

[node name="light_turret" type="StaticBody2D"]
collision_mask = 3
physics_material_override = SubResource( 1 )
script = SubResource( 2 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
z_index = 1
shape = SubResource( 3 )

[node name="Sprite" type="Sprite" parent="."]
texture = ExtResource( 1 )

[node name="detector" type="Area2D" parent="."]
z_index = -1
__meta__ = {
"_edit_group_": true
}

[node name="CollisionShape2D" type="CollisionShape2D" parent="detector"]
shape = SubResource( 4 )

[node name="target_update" type="Timer" parent="."]
wait_time = 0.75

[node name="update" type="Timer" parent="."]
wait_time = 0.08
[connection signal="body_entered" from="detector" to="." method="_on_detector_body_entered"]
[connection signal="body_exited" from="detector" to="." method="_on_detector_body_exited"]
[connection signal="timeout" from="target_update" to="." method="_on_target_update_timeout"]
[connection signal="timeout" from="update" to="." method="_on_update_timeout"]
